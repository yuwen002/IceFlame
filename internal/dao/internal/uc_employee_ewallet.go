// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UcEmployeeEwalletDao is the data access object for table uc_employee_ewallet.
type UcEmployeeEwalletDao struct {
	table   string                   // table is the underlying table name of the DAO.
	group   string                   // group is the database configuration group name of current DAO.
	columns UcEmployeeEwalletColumns // columns contains all the column names of Table for convenient usage.
}

// UcEmployeeEwalletColumns defines and stores column names for table uc_employee_ewallet.
type UcEmployeeEwalletColumns struct {
	Id             string //
	AccountId      string // 关联员工ID
	Money          string // 账户余额（单位：里）（冻结金额）
	Balance        string // 上次入账余额（单位：里）
	TotalMoney     string // 账户累计金额（单位：里）
	UnfreezeAmount string // 解冻金额
	HashEwallet    string // hash钱包
	WxOpenid       string // 微信提现openid
	CreatedAt      string //
	UpdatedAt      string //
}

// ucEmployeeEwalletColumns holds the columns for table uc_employee_ewallet.
var ucEmployeeEwalletColumns = UcEmployeeEwalletColumns{
	Id:             "id",
	AccountId:      "account_id",
	Money:          "money",
	Balance:        "balance",
	TotalMoney:     "total_money",
	UnfreezeAmount: "unfreeze_amount",
	HashEwallet:    "hash_ewallet",
	WxOpenid:       "wx_openid",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

// NewUcEmployeeEwalletDao creates and returns a new DAO object for table data access.
func NewUcEmployeeEwalletDao() *UcEmployeeEwalletDao {
	return &UcEmployeeEwalletDao{
		group:   "default",
		table:   "uc_employee_ewallet",
		columns: ucEmployeeEwalletColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UcEmployeeEwalletDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UcEmployeeEwalletDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UcEmployeeEwalletDao) Columns() UcEmployeeEwalletColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UcEmployeeEwalletDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UcEmployeeEwalletDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UcEmployeeEwalletDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
