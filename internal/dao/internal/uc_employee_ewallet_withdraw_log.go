// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UcEmployeeEwalletWithdrawLogDao is the data access object for table uc_employee_ewallet_withdraw_log.
type UcEmployeeEwalletWithdrawLogDao struct {
	table   string                              // table is the underlying table name of the DAO.
	group   string                              // group is the database configuration group name of current DAO.
	columns UcEmployeeEwalletWithdrawLogColumns // columns contains all the column names of Table for convenient usage.
}

// UcEmployeeEwalletWithdrawLogColumns defines and stores column names for table uc_employee_ewallet_withdraw_log.
type UcEmployeeEwalletWithdrawLogColumns struct {
	Id               string //
	AccountId        string // 关联员工ID
	Money            string // 提现金额（单位：里）
	Balance          string // 提现前余额（单位：里）
	RealMoney        string // 实际入账金额（单位：里）
	ChargeFee        string // 入账扣点金额（单位：里）
	WithdrawalStatus string // 1=申请中2=已通过待到账3=已到账99=已驳回
	RejectContent    string // 驳回内容
	HashWithdraw     string // 入账hash
	PartnerTradeNo   string // 提现到银行卡订单号
	CreatedAt        string //
	UpdatedAt        string //
}

// ucEmployeeEwalletWithdrawLogColumns holds the columns for table uc_employee_ewallet_withdraw_log.
var ucEmployeeEwalletWithdrawLogColumns = UcEmployeeEwalletWithdrawLogColumns{
	Id:               "id",
	AccountId:        "account_id",
	Money:            "money",
	Balance:          "balance",
	RealMoney:        "real_money",
	ChargeFee:        "charge_fee",
	WithdrawalStatus: "withdrawal_status",
	RejectContent:    "reject_content",
	HashWithdraw:     "hash_withdraw",
	PartnerTradeNo:   "partner_trade_no",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

// NewUcEmployeeEwalletWithdrawLogDao creates and returns a new DAO object for table data access.
func NewUcEmployeeEwalletWithdrawLogDao() *UcEmployeeEwalletWithdrawLogDao {
	return &UcEmployeeEwalletWithdrawLogDao{
		group:   "default",
		table:   "uc_employee_ewallet_withdraw_log",
		columns: ucEmployeeEwalletWithdrawLogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UcEmployeeEwalletWithdrawLogDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UcEmployeeEwalletWithdrawLogDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UcEmployeeEwalletWithdrawLogDao) Columns() UcEmployeeEwalletWithdrawLogColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UcEmployeeEwalletWithdrawLogDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UcEmployeeEwalletWithdrawLogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UcEmployeeEwalletWithdrawLogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
