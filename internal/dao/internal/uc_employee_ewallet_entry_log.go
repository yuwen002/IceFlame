// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UcEmployeeEwalletEntryLogDao is the data access object for table uc_employee_ewallet_entry_log.
type UcEmployeeEwalletEntryLogDao struct {
	table   string                           // table is the underlying table name of the DAO.
	group   string                           // group is the database configuration group name of current DAO.
	columns UcEmployeeEwalletEntryLogColumns // columns contains all the column names of Table for convenient usage.
}

// UcEmployeeEwalletEntryLogColumns defines and stores column names for table uc_employee_ewallet_entry_log.
type UcEmployeeEwalletEntryLogColumns struct {
	Id               string //
	AccountId        string // 关联员工ID
	StoreId          string // 关联店铺ID
	SeparateClassify string // 入账类型（1线下扫码支付 2线上 3 店铺推广会员消费分佣 4 合伙人推广会员消费分佣 5配送费 6 店铺额外合伙人分销佣金 7 WiFi分佣）
	Money            string // 入账金额（单位：里）
	Balance          string // 入账前余额（单位：里）
	EntryStatus      string // 入账状态（99为提现驳回入账记录）
	OrderId          string // 关联订单ID
	HashEntry        string // 入账hash
	CreatedAt        string //
	UpdatedAt        string //
}

// ucEmployeeEwalletEntryLogColumns holds the columns for table uc_employee_ewallet_entry_log.
var ucEmployeeEwalletEntryLogColumns = UcEmployeeEwalletEntryLogColumns{
	Id:               "id",
	AccountId:        "account_id",
	StoreId:          "store_id",
	SeparateClassify: "separate_classify",
	Money:            "money",
	Balance:          "balance",
	EntryStatus:      "entry_status",
	OrderId:          "order_id",
	HashEntry:        "hash_entry",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

// NewUcEmployeeEwalletEntryLogDao creates and returns a new DAO object for table data access.
func NewUcEmployeeEwalletEntryLogDao() *UcEmployeeEwalletEntryLogDao {
	return &UcEmployeeEwalletEntryLogDao{
		group:   "default",
		table:   "uc_employee_ewallet_entry_log",
		columns: ucEmployeeEwalletEntryLogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UcEmployeeEwalletEntryLogDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UcEmployeeEwalletEntryLogDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UcEmployeeEwalletEntryLogDao) Columns() UcEmployeeEwalletEntryLogColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UcEmployeeEwalletEntryLogDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UcEmployeeEwalletEntryLogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UcEmployeeEwalletEntryLogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
