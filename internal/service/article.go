// ================================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// You can delete these comments if you wish manually maintain this interface file.
// ================================================================================

package service

import (
	"context"
	"ice_flame/internal/model/article"
)

type (
	IArticle interface {
		CreateChannel(ctx context.Context, in article.CreateChannelInput) (code int32, message string, err error)
		GetChannelById(ctx context.Context, id uint32) (code int32, message string, output *article.ChannelOutput, err error)
		ModifyChannelById(ctx context.Context, in article.ModifyChannelInput) (code int32, message string, err error)
		ListChannel(ctx context.Context, in article.ListChannelInput) (code int32, message string, output []*article.ChannelOutput, err error)
		DelChannelById(ctx context.Context, id uint32) (code int32, message string, err error)
		GetChannelAll(ctx context.Context) (code int32, message string, output []*article.ChannelOutput, err error)
		CreateCategory(ctx context.Context, in article.CreateCategoryInput) (code int32, message string, err error)
		GetCategoryById(ctx context.Context, id uint32) (code int32, message string, output *article.ChannelOutput, err error)
		ModifyCategoryById(ctx context.Context, in article.ModifyCategoryInput) (code int32, message string, err error)
		ListCategory(ctx context.Context, in article.ListCategoryInput) (code int32, message string, output []*article.CategoryOutput, err error)
		DelCategoryById(ctx context.Context, id uint32) (code int32, message string, err error)
		GetCategoryAll(ctx context.Context) (code int32, message string, output []*article.CategoryOutput, err error)
		CreateTag(ctx context.Context, in article.CreateTagInput) (code int32, message string, err error)
		GetTagById(ctx context.Context, id uint32) (code int32, message string, out *article.TagOutput, err error)
		ModifyTagById(ctx context.Context, in article.ModifyTagInput) (code int32, message string, err error)
		ListTag(ctx context.Context, in article.ListTagInput) (code int32, message string, out []*article.TagOutput, err error)
		DelTagById(ctx context.Context, id uint32) (code int32, message string, err error)
		GetTagAll(ctx context.Context) (code int32, message string, out []*article.TagOutput, err error)
		GetMapTag(ctx context.Context) (code int32, message string, out map[string]string, err error)
		CreateArticle(ctx context.Context, in article.CreateArticleInput) (code int32, message string, err error)
		GetArticleById(ctx context.Context, id uint32) (code int32, message string, output *article.GetArticleOutput, err error)
		ModifyArticleById(ctx context.Context, in article.ModifyArticleInput) (code int32, message string, err error)
		ListArticle(ctx context.Context, in article.ListArticleInput) (code int32, message string, output []*article.GetArticleOutput, err error)
		DelArticleById(ctx context.Context, id uint32) (code int32, message string, err error)
	}
	ISinglePage interface {
		Create(ctx context.Context, in article.CreateSinglePageInput) (code int32, message string, err error)
		GetById(ctx context.Context, id uint32) (code int32, message string, output *article.SinglePageOutput, err error)
		ModifyById(ctx context.Context, in article.ModifySinglePageInput) (code int32, message string, err error)
		ModifyStatusById(ctx context.Context, in article.ModifyStatusSinglePageInput) (code int32, message string, err error)
		List(ctx context.Context, in article.ListSinglePageInput) (code int32, message string, output []*article.SinglePageOutput, total int, err error)
		Delete(ctx context.Context, id uint32) (code int32, message string, err error)
	}
)

var (
	localArticle    IArticle
	localSinglePage ISinglePage
)

func Article() IArticle {
	if localArticle == nil {
		panic("implement not found for interface IArticle, forgot register?")
	}
	return localArticle
}

func RegisterArticle(i IArticle) {
	localArticle = i
}

func SinglePage() ISinglePage {
	if localSinglePage == nil {
		panic("implement not found for interface ISinglePage, forgot register?")
	}
	return localSinglePage
}

func RegisterSinglePage(i ISinglePage) {
	localSinglePage = i
}
